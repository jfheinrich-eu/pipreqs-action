name: Create new release
permissions:
  contents: write
  pull-requests: write

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  tests:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.set-version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5.6.0
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install build setuptools-scm pytest pytest-cov
          pip install .[dev]

      - name: Run tests with coverage
        run: pytest --cov --cov-branch

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.4.3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Set version output
        id: set-version
        run: |
          version=$(python -c "import setuptools_scm; print(setuptools_scm.get_version())")
          echo "VERSION=$version" >> $GITHUB_OUTPUT

  build_and_push_image:
    needs:
      - tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [linux/386, linux/amd64, linux/arm/v6, linux/arm]
      fail-fast: false
    env:
      VERSION: ${{ needs.tests.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4.2.2
        
      - name: Dockerhub Registry Secrets
        id: secret_whisperer
        uses: ./.github/actions/secret_whisperer_dockerhub_registry

      - name: Docker login
        uses: docker/login-action@v3.4.0
        with:
          username: ${{ steps.secret_whisperer.outputs.CI_REGISTRY_USER }}
          password: ${{ steps.secret_whisperer.outputs.CI_REGISTRY_PASSWORD }}

      - uses: docker/setup-qemu-action@v3.6.0

      - uses: docker/setup-buildx-action@v3.11.1

      - name: Build and push image
        id: docker-build
        uses: docker/build-push-action@v6.18.0
        continue-on-error: true
        with:
          context: .
          file: Dockerfile-git-python
          platforms: ${{ matrix.arch }}
          push: true
          tags: docker.io/jfheinrich/pipreqs-action:${{ matrix.arch }}-${{ env.VERSION }}
          labels: |
            org.opencontainers.image.title=pipreqs-action
            org.opencontainers.image.name=jfheinrich/pipreqs-action
            org.opencontainers.image.version=${{ env.VERSION }}
            org.opencontainers.image.description=Automatically generates pip requirement files based on imports in your Python project.
            org.opencontainers.image.url=https://github.com/jfheinrich-eu/pipreqs-action
            org.opencontainers.image.source=https://github.com/jfheinrich-eu/pipreqs-action
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.authors=J.F. Heinrich <jfheinrich@users.noreply.github.com>

      - name: Save build status
        id: build-status
        if: always()
        env:
          ARCH: ${{ matrix.arch }}
        run: |
          echo "${{ matrix.arch }}: ${{ steps.docker-build.outcome }}" >> status.txt
          echo "ARCH_SAFE=${ARCH//\//-}" >> $GITHUB_OUTPUT

      - name: Upload build status artifact
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: build-status-${{ steps.build-status.outputs.ARCH_SAFE }}
          path: status.txt

  manifest:
    needs:
      - build_and_push_image
      - tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
        
      - name: Dockerhub Registry Secrets
        id: secret_whisperer
        uses: ./.github/actions/secret_whisperer_dockerhub_registry

      - name: Docker login
        uses: docker/login-action@v3.4.0
        with:
          username: ${{ steps.secret_whisperer.outputs.CI_REGISTRY_USER }}
          password: ${{ steps.secret_whisperer.outputs.CI_REGISTRY_PASSWORD }}

      - name: Download all build statuses
        uses: actions/download-artifact@v4.3.0
        with:
          path: build-statuses

      - name: Display build results
        run: |
          echo "## 🐳 Docker Build Matrix Results" >> $GITHUB_STEP_SUMMARY
          cat build-statuses/*/status.txt >> $GITHUB_STEP_SUMMARY

      - name: Create and push manifest
        run: |
          IMAGE=jfheinrich/pipreqs-action
          VERSION=${{ needs.tests.outputs.VERSION }}
          ARCHES=("linux-amd64" "linux-386" "linux-arm-v6" "linux-arm")
          TAGS=()
          for ARCH in "${ARCHES[@]}"; do
            FULL_TAG="$IMAGE:$ARCH-$VERSION"
            if docker manifest inspect "$FULL_TAG" > /dev/null 2>&1; then
              TAGS+=("$FULL_TAG")
            fi
          done
          if [ ${#TAGS[@]} -gt 0 ]; then
            docker manifest create "$IMAGE:latest" "${TAGS[@]}"
            docker manifest push "$IMAGE:latest"
          else
            echo "No tags found, skipping."
          fi

      - name: Update DockerHub description
        uses: peter-evans/dockerhub-description@v4.0.2
        with:
          username: ${{ steps.secret_whisperer.outputs.CI_REGISTRY_USER }}
          password: ${{ steps.secret_whisperer.outputs.CI_REGISTRY_PASSWORD }}
          repository: jfheinrich/pipreqs-action
          short-description: "Automatically generates pip requirement files based on imports in your Python project."
          readme-filepath: README-Dockerfile-git-python.md
          enable-url-completion: true

  build_python_dist:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2

      - uses: actions/setup-python@v5.6.0
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install build setuptools-scm pytest pytest-cov
          pip install .[dev]

      - name: Build package
        run: |
          python -m build --wheel --sdist

      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: python-dist
          path: dist/

  create_release:
    needs:
      - build_python_dist
      - manifest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Download Python package artifacts
        uses: actions/download-artifact@v4.3.0
        with:
          name: python-dist
          path: dist/

      - name: Generate changelog
        id: changelog
        uses: requarks/changelog-action@v1.10.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}

      - name: Commit CHANGELOG.md
        continue-on-error: true
        uses: stefanzweifel/git-auto-commit-action@v6.0.1
        with:
          branch: master
          commit_message: 'docs: update CHANGELOG.md for ${{ github.ref_name }} [skip ci]'
          file_pattern: CHANGELOG.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2.3.2
        with:
          tag_name: ${{ github.ref_name }}
          name: 'Release ${{ github.ref_name }}'
          body: ${{ steps.changelog.outputs.changes }}
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
